{"version":3,"sources":["..\\..\\..\\..\\Identifier.fs"],"names":[],"mappings":";;;;;;;;AAQQ;AAAA;AAEW;;;;AAGP;AAAA;;AACJ,YAAG,uCAAH,EACK;AAAA;AAAM;AAFA;;;;AAMP;AAAA;AACI;;AACR,YAAG,SAAH,EAEY;AAAU,gFAAkD,oBAAlD;AAAV;AAAO;AAJR;;;;AASP;AAAA;;AACJ,YAAG,uCAAH,EACK;AAAA;AAAM;AAFA;;;;AAMP;AAAA;;AACJ,YAAG,uCAAH,EACK;AAAA;AAAM;AAFA;;;;AAMP;AAAA;AACI;;AACR,YAAG,SAAH,EAEY;AAAU,gFAAkD,oBAAlD;AAAV;AAAO;AAJR;;;;AASP;AAAA;AACI;;AACR,YAAG,SAAH,EAAkB;AAAA;AAAO;AAFd;;;;AAKP;AAAA;AACI;;AACR,YAAG,SAAH,EAEY;AAAO;AAAP;AAAI;AAJL;;;;AASP;AAAA;AACI;;AACR,YAAG,SAAH,EAEY;AAAW;AAAX;AAAQ;AAJT;;;;AASP;AAAA;AACI;;AACR,YAAG,SAAH,EAEa;AAAA;AAAY;AAJd;;;;AAQP;AAAA;AACI;;AACR,YAAG,SAAH,EAEa;AAAA;AAAY;AAJd;;;;AASP;AAAA;AACI;;AACR,YAAG,SAAH,EAEY;AACA,6BAAI,YAAJ;AADA;AAAQ;AAJT;;;;AAYP;AAAA;;AACJ,YAAG,uCAAH,EACK;AAAA;AAAM;AAFA;;;;AAMP;AAAA;;AACJ,YAAG,uCAAH,EACK;AAAA;AAAM;AAFA;;;;AAMP;AAAA;AACJ;AADW;;;;AAIP;AAAA;;AACJ,YAAG,uCAAH,EACK;AAAA;AAAM;AAFA;;;;AAMP;AAAA;AACI;;AACR,YAAG,SAAH,EAEQ;AAAY;AAC8B,2CAA5B,qBAA4B;AAD1C;AAAS;AAJN;;;;AAUP;AAAA;AACJ;AADW;;;;AAIP;AAAA;AACI;;AACR,YAAG,SAAH,EAEQ;AAAY;AAC6C,yCAAiB,iCAAjB,EAAhB,iBAA3B,oBAA2B,CAAgB;AACzC,8CAAW,gBAAX;AAFhB;AAAS;AAJN","file":"Identifier.js","sourcesContent":["ï»¿namespace AcademicMarkdown\r\n\r\nmodule Identifiers = \r\n    open Types\r\n    open Utility\r\n    open System.Text.RegularExpressions\r\n\r\n    let (|IsBlankLine|_|) = \r\n        function\r\n        | \"\" -> true |> Some\r\n        | _ -> None\r\n    \r\n    let (|IsHorizontalRuleLine|_|) (line:string) = \r\n        let pattern = \"^ {0,3}((\\* ?){3,}|(- ?){3,}|(_ ?){3,})$\"\r\n        if matchRegex pattern line\r\n        then Some()\r\n        else None\r\n\r\n    let (|IsHeading|_|) (line:string) = \r\n        let pattern = \"^ {0,3}(#+)([^#]+)#*\"\r\n        let m = Regex.Match(line,pattern) \r\n        if m.Success\r\n            then\r\n                let heading = Heading (m.Groups.[2].Value, m.Groups.[1].Length, uuid())\r\n                Some heading\r\n            else None  \r\n\r\n    let (|IsHeadingLevelOne|_|) (line:string) = \r\n        let pattern = \"^ {0,3}=+$\"\r\n        if matchRegex pattern line\r\n        then Some()\r\n        else None\r\n    \r\n    let (|IsHeadingLevelTwo|_|) (line:string) = \r\n        let pattern = \"^ {0,3}-+$\"\r\n        if matchRegex pattern line\r\n        then Some()\r\n        else None\r\n    \r\n    let (|IsAltHeading|_|) (line:string) = \r\n        let pattern = \"^ {0,3}(%+)([^%]+)\"\r\n        let m = Regex.Match(line,pattern) \r\n        if m.Success\r\n            then\r\n                let heading = Heading (m.Groups.[2].Value, m.Groups.[1].Length, uuid())\r\n                Some heading\r\n            else None  \r\n\r\n    let (|IsTableOfContent|_|) (line: string) = \r\n        let pattern = \"^ {0,3}\\[contents\\]\"\r\n        let m = Regex.Match(line,pattern, RegexOptions.IgnoreCase)\r\n        if m.Success then Some () else None\r\n\r\n    let (|IsLinkRef|_|) (line:string) = \r\n        let pattern = \"\"\"^ {0,3}\\[([^\\^].*)\\] *: *([^ \"]+) *(?:\"([^\"]+)\")?\"\"\"\r\n        let m = Regex.Match(line,pattern) \r\n        if m.Success\r\n            then \r\n                let link = Link (m.Groups.[1].Value, m.Groups.[2].Value, m.Groups.[3].Value)\r\n                Some link\r\n            else None  \r\n\r\n    let (|IsFootnote|_|) (line: string) = \r\n        let pattern = \"\"\"^ {0,3}\\[\\^(.+)\\] *: *(.+)\"\"\"\r\n        let m = Regex.Match(line,pattern) \r\n        if m.Success\r\n            then \r\n                let footNote = Footnote (m.Groups.[1].Value, m.Groups.[2].Value)\r\n                Some footNote\r\n            else None  \r\n\r\n    let (|IsBlockQuoteStart|_|) (line:string) = \r\n        let pattern = \"^ {0,3}>(.*)\"\r\n        let m = Regex.Match(line,pattern) \r\n        if m.Success\r\n            then \r\n                Some m.Groups.[1].Value\r\n            else None  \r\n\r\n    let (|IsBlockQuoteLine|_|) (line:string) = \r\n        let pattern = \"^ {0,3}>(.*)|\\n\"\r\n        let m = Regex.Match(line,pattern) \r\n        if m.Success\r\n            then \r\n                Some m.Groups.[1].Value\r\n            else None  \r\n\r\n    \r\n    let (|IsCodeBlockStart|_|) (line:string) =\r\n        let pattern = \"^ {0,3}`{3}([\\w\\+-]*)? *$\"\r\n        let m = Regex.Match(line,pattern) \r\n        if m.Success\r\n            then \r\n                let language: string = \r\n                    if (m.Groups.[1].Success) \r\n                    then m.Groups.[1].Value\r\n                    else \"\"\r\n                Some language\r\n            else None  \r\n    \r\n    let (|IsFlowChartStart|_|) (line:string) = \r\n        let pattern = \"^ {0,3}`{3} *{flowchart}\"\r\n        if matchRegex pattern line \r\n        then Some()\r\n        else None\r\n\r\n    let (|IsCodeBlockEnd|_|) (line:string) =\r\n        let pattern = \"^ {0,3}`{3}\"\r\n        if matchRegex pattern line\r\n        then Some()\r\n        else None\r\n\r\n    let (|IsCollapesStart|_|) (line:string) = \r\n        let pattern = \"^ {0,3}@@*([^@]*)?$\"\r\n        firstRegexGroup pattern line\r\n\r\n    let (|IsCollapesEnd|_|) (line:string) = \r\n        let pattern = \"^ {0,3}@@$\"\r\n        if matchRegex pattern line\r\n        then Some()\r\n        else None\r\n\r\n    let (|IsExcelTableRow|_|) (line:string) = \r\n        let pattern = \"^(.+\\t)+.*\\t?\"\r\n        let m = Regex.Match(line, pattern)\r\n        if m.Success\r\n        then\r\n            let rowString = m.Groups.[0].Value\r\n            let cells:Cells = rowString.Split [|'\\t'|] |> Array.toList\r\n            Some cells\r\n        else None\r\n           \r\n    let (|IsLazyQuote|_|) (line: string) = \r\n        let pattern = \"^ {0,3}> *(.*)\"\r\n        firstRegexGroup pattern line\r\n\r\n    let (|IsPipeTableRow|_|) (line:string) = \r\n        let pattern = \"^\\|([^\\|]+\\|)+\"\r\n        let m = Regex.Match(line, pattern)\r\n        if m.Success\r\n        then\r\n            let rowString = m.Groups.[0].Value\r\n            let cells:Cells = rowString.Split [|'|'|] |> Array.toList |> List.map (fun x->x.Trim())\r\n            let mutable cells = cells.[1..(List.length cells - 2)]\r\n            Some cells\r\n        else None\r\n"]}