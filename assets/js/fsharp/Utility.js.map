{"version":3,"sources":["..\\..\\..\\..\\Utility.fs"],"names":[],"mappings":";;;;;;;;;;;;AASY;AAAI;;AACR,YAAG,SAAH;AAAA;AAAA;AAAA;AAAA;AADK;;AAKD;AAAI;;AACR,YAAI,SAAJ,EACc;AAAA;AAAY;AAFrB;;AAMD;AAAW;AACS;AACY,gCAApC,6BAAoC;AAFxB;;AAIH;AAAA;AAAa;;AAEK;AAAA;AAAuB","file":"Utility.js","sourcesContent":["ï»¿namespace AcademicMarkdown\r\n\r\nmodule Utility =\r\n    open System\r\n    open System.Text.RegularExpressions\r\n    open Fable.Import.Browser\r\n    open Fable.Core.JsInterop\r\n\r\n    let matchRegex (pattern:string) (input:string) =\r\n        let m = Regex.Match(input, pattern)\r\n        if m.Success then true else false\r\n\r\n\r\n    let firstRegexGroup pattern input =\r\n        let m = Regex.Match(input,pattern) \r\n        if (m.Success) \r\n            then Some m.Groups.[1].Value \r\n            else None  \r\n\r\n    let splitByLine (text: string)= \r\n        let filtered = Regex.Replace (text, \"\\r\\n\", \"\\n\")\r\n        let removedExtraLines = Regex.Replace (filtered, \"[\\n\\r]{3,}\", \"\\n\\n\")\r\n        removedExtraLines.Split [|'\\n'|] |> Array.toList\r\n\r\n    let uuid() = window?uuid() :?> string\r\n\r\n    let htmlEncode (html:string) = window?htmlEncode(html) :?> string"]}