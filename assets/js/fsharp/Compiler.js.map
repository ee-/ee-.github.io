{"version":3,"sources":["..\\..\\..\\..\\Compiler.fs"],"names":[],"mappings":"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","file":"Compiler.js","sourcesContent":["ï»¿namespace AcademicMarkdown\r\n\r\nmodule Compiler =\r\n    open Types\r\n    open States\r\n    open Identifiers\r\n    open Utility\r\n    open System.Text.RegularExpressions\r\n    open Fable.Import.Browser\r\n    open Fable.Core.JsInterop\r\n\r\n    let makeHeading heading = \r\n        let html =\r\n            match heading with\r\n            | Heading (text, level, id) -> \r\n                let correctLevel = if (level > 6) then 6 else level\r\n                \"<h\" + correctLevel.ToString() + \" id='\" + id + \"'>\" + text + \"</h\" + correctLevel.ToString() + \">\"\r\n            | _ -> \"\"\r\n        html\r\n    \r\n    let makeTableOfContent () = \r\n        let mutable html = \"\"\r\n        let mutable index = 0\r\n        while (index < headings.Length) do\r\n            let eachHeading = headings.[headings.Length - index - 1]\r\n            match eachHeading with\r\n            | (text, level, id) -> \r\n                let link = \"<a href='#\" + id + \"'>\" + text + \"</a>\"\r\n                html <- html + link + \"<br>\"\r\n            index <- index + 1\r\n        html\r\n\r\n    let encode (text: string)= \r\n        htmlEncode text\r\n\r\n    let makeEscape (text: string) = \r\n        let pattern = \"\"\"\\\\(.)\"\"\"\r\n        Regex.Replace(text, pattern, \"$1\")\r\n\r\n    let makeBold (text: string) = \r\n        let pattern = \"\\*\\*(.*?)\\*\\*\"\r\n        Regex.Replace(text, pattern, \"<b>$1</b>\")\r\n\r\n    let makeItalic (text: string) = \r\n        let pattern = \"\\*(.*?)\\*\"\r\n        Regex.Replace(text, pattern, \"<i>$1</i>\")\r\n\r\n    let makeUnderline (text: string) = \r\n        let pattern = \"__(.*?)__\"\r\n        Regex.Replace(text, pattern, \"<u>$1</u>\")\r\n    \r\n    let makeStrike (text: string) = \r\n        let pattern = \"~~(.*?)~~\"\r\n        Regex.Replace(text, pattern, \"<s>$1</s>\")\r\n    \r\n    let makeSuperscript (text: string) = \r\n        let pattern = \"\\^\\((.*?)\\)\"\r\n        Regex.Replace(text, pattern, \"<sup>$1</sup>\")\r\n    \r\n    let makeSubscript (text: string) = \r\n        let pattern = \"_\\((.*?)\\)\"\r\n        Regex.Replace(text, pattern, \"<sub>$1</sub>\")\r\n\r\n    let makeInlineCode (text: string) = \r\n        let pattern = \"`(.*?)`\"\r\n        Regex.Replace(text, pattern, \"<code>$1</code>\")\r\n    \r\n    let makeIcon (text: string) = \r\n        let pattern = \"\"\"\\[(fa-[\\w-]+)\\]\"\"\"\r\n        Regex.Replace(text, pattern, \"<i class='fa $1'></i>\")\r\n\r\n    let makeLink (text: string) = \r\n        let pattern = \"\"\"\\[(.+?)\\]\\(([^ ]+?)\\)\"\"\"\r\n        Regex.Replace(text, pattern, \"<a target='_blank' href='$2'>$1</a>\")\r\n    \r\n    let makeImage (text: string) =\r\n        let pattern = \"!\\[(.+?)\\]\\((.+?)\\)\"\r\n        Regex.Replace(text, pattern, \"<img src='$2' title='$1'></img>\")\r\n\r\n    let makeLinkRef (text: string) = \r\n        let pattern = \"\\[(.+?)\\]\\[(.+?)\\]\"\r\n\r\n        let rec replace (inputString: string) = \r\n            let m = Regex.Match (inputString, pattern)\r\n            if m.Success then\r\n                let urltext = m.Groups.[1].Value\r\n                let urlKey = m.Groups.[2].Value\r\n                let mutable url = links.TryFind urlKey |> defaultArg <| \"\"\r\n                if url = \"\" then url <- \"#\"\r\n                let occurancePattern = \"\\[(\" + urltext + \")\\]\\[(\" + urlKey + \")\\]\"\r\n                let outputString = Regex.Replace(inputString, occurancePattern, (\"<a target='_blank' href='\" + url + \"'>$1</a>\"))\r\n                replace outputString\r\n            else inputString\r\n\r\n        replace text\r\n\r\n    let makeFootnoteRef (text: string) = \r\n        let pattern = \"\\[\\^(.+?)\\]\"\r\n\r\n        let rec replace (inputString: string) = \r\n            let m = Regex.Match (inputString, pattern)\r\n            if m.Success then\r\n                let footnoteKey = m.Groups.[1].Value\r\n                let footnote = footnotes.TryFind footnoteKey |> defaultArg <| (\"\",\"\")\r\n                let footnoteIdentifier = fst footnote\r\n                let occurancePattern = \"\\[\\^(\" + footnoteKey + \")\\]\"\r\n                let outputString = Regex.Replace(inputString, occurancePattern, (\"<sup><a href='#footnote-\" + footnoteIdentifier + \"' id='\" + footnoteIdentifier + \"'>\" + footnoteKey + \"</a></sup>\"))\r\n                replace outputString\r\n            else inputString\r\n\r\n        replace text\r\n    \r\n    let makeImageRef (text: string) = \r\n        let pattern = \"!\\[(.+?)\\]\\[([^ ]+?)\\]\"\r\n\r\n        let rec replace (inputString: string) = \r\n            let m = Regex.Match (inputString, pattern)\r\n            if m.Success then\r\n                let urltext = m.Groups.[1].Value\r\n                let urlKey = m.Groups.[2].Value\r\n                if links.ContainsKey urlKey then\r\n                    let url = links.TryFind urlKey |> defaultArg <| \"\"\r\n                    let occurancePattern = \"\\[(\" + urltext + \")\\]\\[(\" + urlKey + \")\\]\"\r\n                    let outputString = Regex.Replace(text, occurancePattern, (\"<img src='\" + url + \"' title='$1'></img>\"))\r\n                    replace outputString\r\n                else\r\n                    inputString\r\n            else inputString\r\n\r\n        replace text        \r\n\r\n\r\n    let makeEmphasis (text: string) = \r\n        text \r\n        |> makeInlineCode |> makeBold |> makeItalic |> makeUnderline |> makeStrike |> makeSuperscript |> makeSubscript\r\n        |> makeIcon |> makeImage |> makeLink |> makeImageRef |> makeLinkRef |> makeFootnoteRef\r\n//        |> makeEscape\r\n    \r\n    let makeBlockQuote (quote: string) = \r\n        \"<blockquote>\" + quote + \"</blockquote>\"\r\n\r\n    let makeCell cell = \r\n        let html = cell\r\n        \"<td>\" + makeEmphasis html + \"</td>\"\r\n\r\n    let makeRow (row: Cells) = \r\n        let mutable html = \"\"\r\n        for eachCell in row do\r\n            html <- html + makeCell eachCell\r\n        \"<tr>\" + html + \"</tr>\"\r\n\r\n    let makeTable (table: Table) =\r\n        let mutable html = \"\"\r\n        for eachRow in table do\r\n            html <- html + makeRow eachRow\r\n        \"<table class='table table-striped table-hover table-bordered'>\" +  html + \"</table>\"\r\n\r\n    let preProcess (stringList: List<string>) =\r\n        let stringList = List.append stringList [\"\"]\r\n        let mutable outputList: List<string> = []\r\n        let mutable rowIndex = 0\r\n        while (rowIndex <= stringList.Length-2) do\r\n            let thisRow = stringList.[rowIndex]\r\n            let nextRow = stringList.[rowIndex+1]\r\n            match nextRow with\r\n            | IsHeadingLevelOne -> \r\n                match thisRow with\r\n                | IsHeading _ ->\r\n                    outputList <- thisRow :: outputList\r\n                | IsAltHeading  _ ->\r\n                    outputList <- thisRow :: outputList\r\n                | IsBlankLine _ ->\r\n                    outputList <- thisRow :: outputList\r\n                | _ -> \r\n                    outputList <- (\"#\" + thisRow) :: outputList\r\n                    rowIndex <- rowIndex + 1\r\n            | IsHeadingLevelTwo -> \r\n                match thisRow with\r\n                | IsHeading _ ->\r\n                    outputList <- thisRow :: outputList\r\n                | IsAltHeading  _ ->\r\n                    outputList <- thisRow :: outputList\r\n                | IsBlankLine _ ->\r\n                    outputList <- thisRow :: outputList\r\n                | _ -> \r\n                    outputList <- (\"##\" + thisRow) :: outputList\r\n                    rowIndex <- rowIndex + 1\r\n            | _ -> \r\n                outputList <- thisRow :: outputList\r\n            rowIndex <- rowIndex + 1  \r\n        outputList |> List.rev\r\n\r\n    let makeFootnote () =\r\n        let mutable outputHtml = \"\"\r\n        let mutable index = 1\r\n        for eachFootnote in footnotes do\r\n            let html = (snd eachFootnote.Value) + \" <a href='#\" + (fst eachFootnote.Value) + \"' id='footnote-\" + (fst eachFootnote.Value) + \"'><i class='fa fa-level-up'></i></a>\"\r\n            outputHtml <- outputHtml+ \"<li>\" + html + \"</li>\"\r\n        \"<hr><ol>\" + makeEmphasis outputHtml + \"</ol>\"\r\n\r\n    let getFlowCharts () = \r\n        for eachFlowChart in flowcharts do\r\n            let flowchartCode = eachFlowChart.Value\r\n            let flowchartId = eachFlowChart.Key\r\n            window?renderFlowchart(flowchartCode,flowchartId) |> ignore\r\n    window?getFlowCharts <- getFlowCharts\r\n"]}